{"ast":null,"code":"import _asyncToGenerator from \"E:/Centennial College/Fall 2022_ 3rd semester/Wed Application Development/Group Project/COMP-229.005.F2022.Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport let InventoryRepository = /*#__PURE__*/(() => {\n  class InventoryRepository {\n    constructor(dataSource) {\n      this.dataSource = dataSource;\n      this.tempInventoryList = [];\n      this.listReady = false;\n    }\n\n    getInventory() {\n      return this.tempInventoryList;\n    }\n\n    setInventory() {\n      this.listReady = false;\n      this.dataSource.getInventoryList().subscribe(data => {\n        this.tempInventoryList = data;\n        this.listReady = true;\n      });\n    }\n\n    getItem(id) {\n      return Object.assign({}, this.tempInventoryList.find(i => i._id === id));\n    }\n\n    saveInventory(item) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        // If it does not have id, then create a new item.\n        if (item._id == null || item._id == \"\") {\n          _this.dataSource.insertInventory(item).subscribe(response => {\n            if (response._id) // If API created\n              {\n                _this.tempInventoryList.push(response);\n              } else {\n              // If API send error.\n              // Convert into ResponseModel to get the error message.\n              let error = response;\n              alert(`Error: ${error.message}`);\n            }\n          });\n        } else {\n          // If it has id, then update a existing item.\n          _this.dataSource.updateInventory(item).subscribe(resp => {\n            // Convert into ResponseModel to get the error message.\n            let response = resp;\n\n            if (response.success == true) {\n              console.log(`Sucess: ${response.success}`);\n\n              _this.tempInventoryList.splice(_this.tempInventoryList.findIndex(i => i._id == item._id), 1, item);\n            } else {\n              // If API send error.\n              alert(`Error: ${response.message}`);\n            }\n          });\n        }\n      })();\n    }\n\n    deleteInventory(id) {\n      this.dataSource.deleteInventory(id).subscribe(response => {\n        if (response.success) {\n          this.tempInventoryList.splice(this.tempInventoryList.findIndex(item => item._id == id), 1);\n        } else {\n          alert(`Error: ${response.message}`);\n        }\n      });\n    }\n\n  }\n\n  InventoryRepository.ɵfac = function InventoryRepository_Factory(t) {\n    return new (t || InventoryRepository)(i0.ɵɵinject(i1.RestDataSource));\n  };\n\n  InventoryRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InventoryRepository,\n    factory: InventoryRepository.ɵfac\n  });\n  return InventoryRepository;\n})();","map":null,"metadata":{},"sourceType":"module"}