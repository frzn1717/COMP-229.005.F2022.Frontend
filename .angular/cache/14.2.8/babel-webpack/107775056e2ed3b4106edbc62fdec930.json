{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/3623y/OneDrive/Desktop/Javascript Web application development/COMP229.005.F2022.Frontend-Week10/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport class InventoryRepository {\n  constructor(dataSource) {\n    this.dataSource = dataSource;\n    this.tempInventoryList = [];\n    this.listReady = false;\n  }\n\n  getInventory() {\n    return this.tempInventoryList;\n  }\n\n  setInventory() {\n    this.listReady = false;\n    this.dataSource.getInventoryList().subscribe(data => {\n      this.tempInventoryList = data;\n      this.listReady = true;\n    });\n  }\n\n  getItem(id) {\n    return Object.assign({}, this.tempInventoryList.find(i => i._id === id));\n  }\n\n  saveInventory(item) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // If it does not have id, then create a new item.\n      if (item._id == null || item._id == \"\") {\n        _this.dataSource.insertInventory(item).subscribe(response => {\n          if (response._id) // If API created\n            {\n              _this.tempInventoryList.push(response);\n            } else {\n            // If API send error.\n            // Convert into ResponseModel to get the error message.\n            let error = response;\n            alert(`Error: ${error.message}`);\n          }\n        });\n      } else {\n        // If it has id, then update a existing item.\n        _this.dataSource.updateInventory(item).subscribe(resp => {\n          // Convert into ResponseModel to get the error message.\n          let response = resp;\n\n          if (response.success == true) {\n            console.log(`Sucess: ${response.success}`);\n\n            _this.tempInventoryList.splice(_this.tempInventoryList.findIndex(i => i._id == item._id), 1, item);\n          } else {\n            // If API send error.\n            alert(`Error: ${response.message}`);\n          }\n        });\n      }\n    })();\n  }\n\n  deleteInventory(id) {\n    this.dataSource.deleteInventory(id).subscribe(response => {\n      if (response.success) {\n        this.tempInventoryList.splice(this.tempInventoryList.findIndex(item => item._id == id), 1);\n      } else {\n        alert(`Error: ${response.message}`);\n      }\n    });\n  }\n\n}\n\nInventoryRepository.ɵfac = function InventoryRepository_Factory(t) {\n  return new (t || InventoryRepository)(i0.ɵɵinject(i1.RestDataSource));\n};\n\nInventoryRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InventoryRepository,\n  factory: InventoryRepository.ɵfac\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,mBAAP,CAA0B;EAK5BC,YAAoBC,UAApB,EAA8C;IAA1B;IAHZ,yBAAiC,EAAjC;IACD,iBAAqB,KAArB;EAE2C;;EAElDC,YAAY;IACR,OAAO,KAAKC,iBAAZ;EACH;;EAEDC,YAAY;IACR,KAAKC,SAAL,GAAiB,KAAjB;IACA,KAAKJ,UAAL,CAAgBK,gBAAhB,GAAmCC,SAAnC,CAA6CC,IAAI,IAAG;MAChD,KAAKL,iBAAL,GAAyBK,IAAzB;MACA,KAAKH,SAAL,GAAiB,IAAjB;IACH,CAHD;EAIH;;EAEDI,OAAO,CAACC,EAAD,EAAW;IACd,OAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKT,iBAAL,CAAuBU,IAAvB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUL,EAA3C,CAAlB,CAAP;EACH;;EAEKM,aAAa,CAACC,IAAD,EAAgB;IAAA;;IAAA;MAE/B;MACA,IAAIA,IAAI,CAACF,GAAL,IAAY,IAAZ,IAAoBE,IAAI,CAACF,GAAL,IAAY,EAApC,EAAwC;QACpC,KAAI,CAACd,UAAL,CAAgBiB,eAAhB,CAAgCD,IAAhC,EACKV,SADL,CACeY,QAAQ,IAAG;UAClB,IAAGA,QAAQ,CAACJ,GAAZ,EAAiB;YACjB;cACI,KAAI,CAACZ,iBAAL,CAAuBiB,IAAvB,CAA4BD,QAA5B;YACH,CAHD,MAII;YAAE;YACF;YACA,IAAIE,KAAK,GAAGF,QAAZ;YACAG,KAAK,CAAC,UAAUD,KAAK,CAACE,OAAO,EAAxB,CAAL;UACH;QACJ,CAXL;MAYH,CAbD,MAaO;QACH;QACA,KAAI,CAACtB,UAAL,CAAgBuB,eAAhB,CAAgCP,IAAhC,EAAsCV,SAAtC,CAAgDkB,IAAI,IAAG;UAEnD;UACA,IAAIN,QAAQ,GAAGM,IAAf;;UACA,IAAIN,QAAQ,CAACO,OAAT,IAAoB,IAAxB,EAA8B;YAC1BC,OAAO,CAACC,GAAR,CAAY,WAAWT,QAAQ,CAACO,OAAO,EAAvC;;YACA,KAAI,CAACvB,iBAAL,CAAuB0B,MAAvB,CAA8B,KAAI,CAAC1B,iBAAL,CAC1B2B,SAD0B,CAChBhB,CAAC,IAAIA,CAAC,CAACC,GAAF,IAASE,IAAI,CAACF,GADH,CAA9B,EACuC,CADvC,EAC0CE,IAD1C;UAEH,CAJD,MAKI;YACA;YACAK,KAAK,CAAC,UAAUH,QAAQ,CAACI,OAAO,EAA3B,CAAL;UACH;QACJ,CAbD;MAcH;IAhC8B;EAiClC;;EAEDQ,eAAe,CAACrB,EAAD,EAAW;IACtB,KAAKT,UAAL,CAAgB8B,eAAhB,CAAgCrB,EAAhC,EAAoCH,SAApC,CAA8CY,QAAQ,IAAG;MACrD,IAAIA,QAAQ,CAACO,OAAb,EAAsB;QAClB,KAAKvB,iBAAL,CAAuB0B,MAAvB,CAA8B,KAAK1B,iBAAL,CAC1B2B,SAD0B,CAChBb,IAAI,IAAIA,IAAI,CAACF,GAAL,IAAYL,EADJ,CAA9B,EACuC,CADvC;MAEH,CAHD,MAII;QACAY,KAAK,CAAC,UAAUH,QAAQ,CAACI,OAAO,EAA3B,CAAL;MACH;IACJ,CARD;EASH;;AApE2B;;;mBAAnBxB,qBAAmBiC;AAAA;;;SAAnBjC;EAAmBkC,SAAnBlC,mBAAmB","names":["InventoryRepository","constructor","dataSource","getInventory","tempInventoryList","setInventory","listReady","getInventoryList","subscribe","data","getItem","id","Object","assign","find","i","_id","saveInventory","item","insertInventory","response","push","error","alert","message","updateInventory","resp","success","console","log","splice","findIndex","deleteInventory","i0","factory"],"sourceRoot":"","sources":["C:\\Users\\3623y\\OneDrive\\Desktop\\Javascript Web application development\\COMP229.005.F2022.Frontend-Week10\\src\\app\\models\\inventory.repository.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Inventory } from \"./inventory.model\";\nimport { RestDataSource } from \"./rest.datasource\";\nimport { ResponseModel } from \"./response.model\";\n\n@Injectable()\nexport class InventoryRepository {\n\n    private tempInventoryList: Inventory[] = [];\n    public listReady: boolean = false;\n\n    constructor(private dataSource: RestDataSource) {}\n\n    getInventory(): Inventory[] {\n        return this.tempInventoryList;\n    }\n\n    setInventory(){\n        this.listReady = false;\n        this.dataSource.getInventoryList().subscribe(data => {\n            this.tempInventoryList = data;\n            this.listReady = true;\n        });\n    }\n\n    getItem(id: string): Inventory {\n        return Object.assign({}, this.tempInventoryList.find(i => i._id === id)!);        \n    }\n\n    async saveInventory(item: Inventory) {\n\n        // If it does not have id, then create a new item.\n        if (item._id == null || item._id == \"\") {\n            this.dataSource.insertInventory(item)\n                .subscribe(response => {\n                    if(response._id) // If API created\n                    {\n                        this.tempInventoryList.push(response);\n                    }\n                    else{ // If API send error.\n                        // Convert into ResponseModel to get the error message.\n                        let error = response as ResponseModel;  \n                        alert(`Error: ${error.message}`);\n                    }\n                });\n        } else {\n            // If it has id, then update a existing item.\n            this.dataSource.updateInventory(item).subscribe(resp => {\n\n                // Convert into ResponseModel to get the error message.\n                let response = resp as ResponseModel;\n                if (response.success == true) {\n                    console.log(`Sucess: ${response.success}`);\n                    this.tempInventoryList.splice(this.tempInventoryList.\n                        findIndex(i => i._id == item._id), 1, item);\n                }\n                else{\n                    // If API send error.\n                    alert(`Error: ${response.message}`);\n                }        \n            });\n        }\n    }\n\n    deleteInventory(id: string) {\n        this.dataSource.deleteInventory(id).subscribe(response => {\n            if (response.success) {\n                this.tempInventoryList.splice(this.tempInventoryList.\n                    findIndex(item => item._id == id), 1);                                \n            }\n            else{\n                alert(`Error: ${response.message}`);\n            }\n        })\n    }\n\n}"]},"metadata":{},"sourceType":"module"}