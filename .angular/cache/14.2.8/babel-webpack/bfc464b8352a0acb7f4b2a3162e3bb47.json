{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(datasource) {\n      this.datasource = datasource;\n    }\n\n    authenticate(username, password) {\n      return this.datasource.authenticate(username, password).pipe(map(response => {\n        if (response.success) {\n          this.username = username;\n        }\n\n        return response;\n      }));\n    }\n\n    signupUser(user) {\n      return this.datasource.signupUser(user);\n    }\n\n    get authenticated() {\n      return this.datasource.auth_token != null; // if this is not equal to null return bloolean\n    }\n\n    clear() {\n      this.username = null;\n      this.datasource.auth_token = null; //it will destory the token, beacause token is not right\n    }\n\n    get redirectUrl() {\n      let result = this._redirectUrl; //\n\n      this._redirectUrl = null;\n      return result;\n    }\n\n    set redirectUrl(url) {\n      this._redirectUrl = url;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.RestDataSource));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}