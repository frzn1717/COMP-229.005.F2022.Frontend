{"ast":null,"code":"import { of } from \"rxjs\";\nimport { map, catchError } from \"rxjs/operators\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RestDataSource = /*#__PURE__*/(() => {\n  class RestDataSource {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiURL;\n    } // Inventory\n\n\n    getInventoryList() {\n      return this.http.get(this.baseUrl + \"inventory/list\");\n    }\n\n    insertInventory(item) {\n      return this.http.post(this.baseUrl + \"inventory/add\", item, this.provideToken()).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        console.log(error.error);\n        return of(error.error);\n      }));\n    }\n\n    updateInventory(item) {\n      return this.http.put(this.baseUrl + \"inventory/edit/\" + item._id, item, this.provideToken()).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return of(error.error);\n      }));\n    }\n\n    deleteInventory(id) {\n      return this.http.delete(this.baseUrl + \"inventory/delete/\" + id, this.provideToken()).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return of(error.error);\n      }));\n    } // User endpoint of the API\n\n\n    authenticate(user, pass) {\n      return this.http.post(this.baseUrl + \"users/signin\", {\n        username: user,\n        password: pass\n      }).pipe(map(response => {\n        // console.log(response);\n        this.auth_token = response.success ? response.token : null;\n        return response;\n      }), catchError(error => {\n        return of(error.error);\n      }));\n    }\n\n    signupUser(user) {\n      return this.http.post(this.baseUrl + \"users/signup\", user).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return of(error.error);\n      }));\n    } // Previously called getOptions()\n\n\n    provideToken() {\n      return {\n        headers: new HttpHeaders({\n          \"Authorization\": `Bearer ${this.auth_token}`\n        })\n      };\n    }\n\n  }\n\n  RestDataSource.ɵfac = function RestDataSource_Factory(t) {\n    return new (t || RestDataSource)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RestDataSource.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestDataSource,\n    factory: RestDataSource.ɵfac\n  });\n  return RestDataSource;\n})();","map":null,"metadata":{},"sourceType":"module"}